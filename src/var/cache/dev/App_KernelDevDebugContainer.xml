<?xml version="1.0" encoding="utf-8"?>
<container xmlns="http://symfony.com/schema/dic/services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">
  <parameters>
    <parameter key="kernel.project_dir">/var/www</parameter>
    <parameter key="kernel.environment">dev</parameter>
    <parameter key="kernel.runtime_environment">%env(default:kernel.environment:APP_RUNTIME_ENV)%</parameter>
    <parameter key="kernel.debug">true</parameter>
    <parameter key="kernel.build_dir">/var/www/var/cache/dev</parameter>
    <parameter key="kernel.cache_dir">/var/www/var/cache/dev</parameter>
    <parameter key="kernel.logs_dir">/var/www/var/log</parameter>
    <parameter key="kernel.bundles" type="collection">
      <parameter key="FrameworkBundle">Symfony\Bundle\FrameworkBundle\FrameworkBundle</parameter>
      <parameter key="OverblogGraphQLBundle">Overblog\GraphQLBundle\OverblogGraphQLBundle</parameter>
      <parameter key="TwigBundle">Symfony\Bundle\TwigBundle\TwigBundle</parameter>
      <parameter key="OverblogGraphiQLBundle">Overblog\GraphiQLBundle\OverblogGraphiQLBundle</parameter>
    </parameter>
    <parameter key="kernel.bundles_metadata" type="collection">
      <parameter key="FrameworkBundle" type="collection">
        <parameter key="path">/var/www/vendor/symfony/framework-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\FrameworkBundle</parameter>
      </parameter>
      <parameter key="OverblogGraphQLBundle" type="collection">
        <parameter key="path">/var/www/vendor/overblog/graphql-bundle/src</parameter>
        <parameter key="namespace">Overblog\GraphQLBundle</parameter>
      </parameter>
      <parameter key="TwigBundle" type="collection">
        <parameter key="path">/var/www/vendor/symfony/twig-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\TwigBundle</parameter>
      </parameter>
      <parameter key="OverblogGraphiQLBundle" type="collection">
        <parameter key="path">/var/www/vendor/overblog/graphiql-bundle</parameter>
        <parameter key="namespace">Overblog\GraphiQLBundle</parameter>
      </parameter>
    </parameter>
    <parameter key="kernel.charset">UTF-8</parameter>
    <parameter key="kernel.container_class">App_KernelDevDebugContainer</parameter>
    <parameter key="container.dumper.inline_class_loader">true</parameter>
    <parameter key="event_dispatcher.event_aliases" type="collection">
      <parameter key="Symfony\Component\Console\Event\ConsoleCommandEvent">console.command</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleErrorEvent">console.error</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleSignalEvent">console.signal</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleTerminateEvent">console.terminate</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ControllerArgumentsEvent">kernel.controller_arguments</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ControllerEvent">kernel.controller</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ResponseEvent">kernel.response</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\FinishRequestEvent">kernel.finish_request</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\RequestEvent">kernel.request</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ViewEvent">kernel.view</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ExceptionEvent">kernel.exception</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\TerminateEvent">kernel.terminate</parameter>
    </parameter>
    <parameter key="fragment.renderer.hinclude.global_template">null</parameter>
    <parameter key="fragment.path">/_fragment</parameter>
    <parameter key="kernel.secret">%env(APP_SECRET)%</parameter>
    <parameter key="kernel.http_method_override">true</parameter>
    <parameter key="kernel.trusted_hosts" type="collection"/>
    <parameter key="kernel.default_locale">en</parameter>
    <parameter key="kernel.error_controller">error_controller</parameter>
    <parameter key="debug.file_link_format">null</parameter>
    <parameter key="cache.prefix.seed">_/var/www.App_KernelDevDebugContainer</parameter>
    <parameter key="session.metadata.storage_key">_sf2_meta</parameter>
    <parameter key="session.storage.options" type="collection">
      <parameter key="cache_limiter" type="string">0</parameter>
      <parameter key="cookie_secure">auto</parameter>
      <parameter key="cookie_httponly">true</parameter>
      <parameter key="cookie_samesite">lax</parameter>
      <parameter key="gc_probability">1</parameter>
    </parameter>
    <parameter key="session.save_path">/var/www/var/cache/dev/sessions</parameter>
    <parameter key="session.metadata.update_threshold">0</parameter>
    <parameter key="data_collector.templates" type="collection"/>
    <parameter key="debug.error_handler.throw_at">-1</parameter>
    <parameter key="debug.container.dump">/var/www/var/cache/dev/App_KernelDevDebugContainer.xml</parameter>
    <parameter key="router.request_context.host">localhost</parameter>
    <parameter key="router.request_context.scheme">http</parameter>
    <parameter key="router.request_context.base_url"></parameter>
    <parameter key="router.resource">kernel::loadRoutes</parameter>
    <parameter key="request_listener.http_port">80</parameter>
    <parameter key="request_listener.https_port">443</parameter>
    <parameter key="overblog_graphql_types.config" type="collection">
      <parameter key="Query" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">QueryType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Main Query</parameter>
          <parameter key="fields" type="collection">
            <parameter key="shortneerUrl" type="collection">
              <parameter key="type">ShortnnerUrl</parameter>
              <parameter key="args" type="collection">
                <parameter key="url" type="collection">
                  <parameter key="description">short a new url</parameter>
                  <parameter key="type">String</parameter>
                </parameter>
              </parameter>
              <parameter key="resolve">@=resolver('ShortnnerUrl', [args])</parameter>
            </parameter>
          </parameter>
          <parameter key="name">Query</parameter>
          <parameter key="builders" type="collection"/>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="ShortnnerUrl" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">ShortnnerUrlType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">An url shortneer</parameter>
          <parameter key="fields" type="collection">
            <parameter key="url" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">url</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">ShortnnerUrl</parameter>
          <parameter key="builders" type="collection"/>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
      <parameter key="PageInfo" type="collection">
        <parameter key="type">object</parameter>
        <parameter key="class_name">PageInfoType</parameter>
        <parameter key="inherits" type="collection"/>
        <parameter key="decorator">false</parameter>
        <parameter key="config" type="collection">
          <parameter key="description">Information about pagination in a connection.</parameter>
          <parameter key="fields" type="collection">
            <parameter key="hasNextPage" type="collection">
              <parameter key="type">Boolean!</parameter>
              <parameter key="description">When paginating forwards, are there more items?</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="hasPreviousPage" type="collection">
              <parameter key="type">Boolean!</parameter>
              <parameter key="description">When paginating backwards, are there more items?</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="startCursor" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">When paginating backwards, the cursor to continue.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
            <parameter key="endCursor" type="collection">
              <parameter key="type">String</parameter>
              <parameter key="description">When paginating forwards, the cursor to continue.</parameter>
              <parameter key="args" type="collection"/>
            </parameter>
          </parameter>
          <parameter key="name">PageInfo</parameter>
          <parameter key="builders" type="collection"/>
          <parameter key="interfaces" type="collection"/>
        </parameter>
      </parameter>
    </parameter>
    <parameter key="overblog_graphql.batching_method">relay</parameter>
    <parameter key="overblog_graphql.query_max_depth">0</parameter>
    <parameter key="overblog_graphql.query_max_complexity">0</parameter>
    <parameter key="overblog_graphql.enable_introspection">true</parameter>
    <parameter key="overblog_graphql.handle_cors">false</parameter>
    <parameter key="overblog_graphql.class_namespace">Overblog\GraphQLBundle\__DEFINITIONS__</parameter>
    <parameter key="overblog_graphql.cache_dir">null</parameter>
    <parameter key="overblog_graphql.cache_dir_permissions">null</parameter>
    <parameter key="overblog_graphql.argument_class">Overblog\GraphQLBundle\Definition\Argument</parameter>
    <parameter key="overblog_graphql.use_experimental_executor">false</parameter>
    <parameter key="overblog_graphql.use_classloader_listener">true</parameter>
    <parameter key="overblog_graphql.resources_dir">/var/www/vendor/overblog/graphql-bundle/src/Resources</parameter>
    <parameter key="twig.form.resources" type="collection">
      <parameter>form_div_layout.html.twig</parameter>
    </parameter>
    <parameter key="twig.default_path">/var/www/templates</parameter>
    <parameter key="overblog_graphiql.endpoint_resolver">Overblog\GraphiQLBundle\Config\GraphQLEndpoint\Helpers\OverblogGraphQLBundleEndpointResolver</parameter>
    <parameter key="overblog_graphql_types.classes_map" type="collection"/>
    <parameter key="console.command.ids" type="collection"/>
  </parameters>
  <services>
    <service id="service_container" class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" synthetic="true"/>
    <service id="kernel" class="App\Kernel" public="true" synthetic="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="routing.route_loader"/>
    </service>
    <service id="App\GraphQL\Resolver\ShortnnerUrlResolver" class="App\GraphQL\Resolver\ShortnnerUrlResolver" public="true" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.resolver"/>
      <tag name="overblog_graphql.resolver" method="resolve"/>
      <tag name="overblog_graphql.resolver" alias="ShortnnerUrl" method="resolve"/>
    </service>
    <service id="controller_resolver" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver">
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
    </service>
    <service id="argument_metadata_factory" class="Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory"/>
    <service id="argument_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver">
      <argument type="service" id="argument_metadata_factory"/>
      <argument type="iterator">
        <argument type="service" id="argument_resolver.request_attribute"/>
        <argument type="service" id="argument_resolver.request"/>
        <argument type="service" id="argument_resolver.session"/>
        <argument type="service" id="argument_resolver.service"/>
        <argument type="service" id="argument_resolver.default"/>
        <argument type="service" id="argument_resolver.variadic"/>
      </argument>
    </service>
    <service id="argument_resolver.request_attribute" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver">
      <tag name="controller.argument_value_resolver" priority="100"/>
    </service>
    <service id="argument_resolver.request" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver">
      <tag name="controller.argument_value_resolver" priority="50"/>
    </service>
    <service id="argument_resolver.session" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver">
      <tag name="controller.argument_value_resolver" priority="50"/>
    </service>
    <service id="argument_resolver.service" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver">
      <tag name="controller.argument_value_resolver" priority="-50"/>
      <argument type="service" id=".service_locator.E1oD6BG"/>
    </service>
    <service id="argument_resolver.default" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver">
      <tag name="controller.argument_value_resolver" priority="-100"/>
    </service>
    <service id="argument_resolver.variadic" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver">
      <tag name="controller.argument_value_resolver" priority="-150"/>
    </service>
    <service id="response_listener" class="Symfony\Component\HttpKernel\EventListener\ResponseListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument>UTF-8</argument>
    </service>
    <service id="streamed_response_listener" class="Symfony\Component\HttpKernel\EventListener\StreamedResponseListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="locale_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="request_stack"/>
      <argument>en</argument>
      <argument type="service" id="router.default" on-invalid="ignore"/>
    </service>
    <service id="validate_request_listener" class="Symfony\Component\HttpKernel\EventListener\ValidateRequestListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="disallow_search_engine_index_response_listener" class="Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="error_controller" class="Symfony\Component\HttpKernel\Controller\ErrorController" public="true">
      <argument type="service" id="http_kernel"/>
      <argument>error_controller</argument>
      <argument type="service" id="twig.error_renderer.html"/>
    </service>
    <service id="exception_listener" class="Symfony\Component\HttpKernel\EventListener\ErrorListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument>error_controller</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>true</argument>
    </service>
    <service id="parameter_bag" class="Symfony\Component\DependencyInjection\ParameterBag\ContainerBag">
      <argument type="service" id="service_container"/>
    </service>
    <service id="event_dispatcher" class="Symfony\Component\EventDispatcher\EventDispatcher" public="true">
      <tag name="container.hot_path"/>
      <call method="addListener">
        <argument>graphql.error_formatting</argument>
        <argument type="collection">
          <argument type="service" id="Overblog\GraphQLBundle\Validator\Formatter"/>
          <argument>onErrorFormatting</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>graphql.executor.context</argument>
        <argument type="collection">
          <argument type="service" id="Overblog\GraphQLBundle\EventListener\RequestFilesListener"/>
          <argument>onExecutorContextEvent</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>graphql.type_loaded</argument>
        <argument type="collection">
          <argument type="service" id="Overblog\GraphQLBundle\EventListener\TypeDecoratorListener"/>
          <argument>onTypeLoaded</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>graphql.error_formatting</argument>
        <argument type="collection">
          <argument type="service" id="Overblog\GraphQLBundle\EventListener\ValidationErrorsListener"/>
          <argument>onErrorFormatting</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>graphql.post_executor</argument>
        <argument type="collection">
          <argument type="service" id="Overblog\GraphQLBundle\EventListener\ErrorHandlerListener"/>
          <argument>onPostExecutor</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>graphql.error_formatting</argument>
        <argument type="collection">
          <argument type="service" id="Overblog\GraphQLBundle\EventListener\ErrorLoggerListener"/>
          <argument>onErrorFormatting</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="overblog_graphql.event_listener.classloader_listener"/>
          <argument>load</argument>
        </argument>
        <argument>255</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service" id="overblog_graphql.event_listener.classloader_listener"/>
          <argument>load</argument>
        </argument>
        <argument>255</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="streamed_response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1024</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="locale_listener"/>
          <argument>setDefaultLocale</argument>
        </argument>
        <argument>100</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="locale_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>16</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="locale_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="validate_request_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="disallow_search_engine_index_response_listener"/>
          <argument>onResponse</argument>
        </argument>
        <argument>-255</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service" id="exception_listener"/>
          <argument>onControllerArguments</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service" id="exception_listener"/>
          <argument>logKernelException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service" id="exception_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="exception_listener"/>
          <argument>removeCspHeader</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="locale_aware_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>15</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="locale_aware_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>-15</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service" id="console.error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service" id="console.error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service" id="console.suggest_missing_package_subscriber"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="session_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="session_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1000</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="session_listener"/>
          <argument>onFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="router_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>32</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="router_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service" id="router_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-64</argument>
      </call>
    </service>
    <service id="http_kernel" class="Symfony\Component\HttpKernel\HttpKernel" public="true">
      <tag name="container.hot_path"/>
      <argument type="service" id="event_dispatcher"/>
      <argument type="service" id="controller_resolver"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="argument_resolver"/>
    </service>
    <service id="request_stack" class="Symfony\Component\HttpFoundation\RequestStack" public="true"/>
    <service id="http_cache" class="Symfony\Bundle\FrameworkBundle\HttpCache\HttpCache">
      <tag name="container.hot_path"/>
      <argument type="service" id="kernel"/>
      <argument type="service" id="http_cache.store"/>
      <argument>null</argument>
      <argument type="collection">
        <argument key="debug">true</argument>
      </argument>
    </service>
    <service id="http_cache.store" class="Symfony\Component\HttpKernel\HttpCache\Store">
      <argument>/var/www/var/cache/dev/http_cache</argument>
    </service>
    <service id="url_helper" class="Symfony\Component\HttpFoundation\UrlHelper">
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
    </service>
    <service id="cache_warmer" class="Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate" public="true">
      <tag name="container.no_preload"/>
      <argument type="tagged_iterator" tag="kernel.cache_warmer"/>
      <argument>true</argument>
      <argument>/var/www/var/cache/dev/App_KernelDevDebugContainerDeprecations.log</argument>
    </service>
    <service id="cache_clearer" class="Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer" public="true">
      <tag name="container.private" package="symfony/framework-bundle" version="5.2"/>
      <argument type="tagged_iterator" tag="kernel.cache_clearer"/>
    </service>
    <service id="filesystem" class="Symfony\Component\Filesystem\Filesystem" public="true">
      <tag name="container.private" package="symfony/framework-bundle" version="5.2"/>
    </service>
    <service id="file_locator" class="Symfony\Component\HttpKernel\Config\FileLocator">
      <argument type="service" id="kernel"/>
    </service>
    <service id="uri_signer" class="Symfony\Component\HttpKernel\UriSigner">
      <argument>%env(APP_SECRET)%</argument>
    </service>
    <service id="config_cache_factory" class="Symfony\Component\Config\ResourceCheckerConfigCacheFactory">
      <argument type="tagged_iterator" tag="config_cache.resource_checker"/>
    </service>
    <service id="dependency_injection.config.container_parameters_resource_checker" class="Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker">
      <tag name="config_cache.resource_checker" priority="-980"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="config.resource.self_checking_resource_checker" class="Symfony\Component\Config\Resource\SelfCheckingResourceChecker">
      <tag name="config_cache.resource_checker" priority="-990"/>
    </service>
    <service id="services_resetter" class="Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter" public="true">
      <argument type="iterator">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
      </argument>
      <argument type="collection">
        <argument key="cache.app" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.system" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.validator" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.serializer" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.annotations" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.property_info" type="collection">
          <argument>reset</argument>
        </argument>
      </argument>
    </service>
    <service id="reverse_container" class="Symfony\Component\DependencyInjection\ReverseContainer">
      <argument type="service" id="service_container"/>
      <argument type="service" id=".service_locator.XXv1IfR"/>
    </service>
    <service id="locale_aware_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleAwareListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="iterator">
        <argument type="service" id="slugger"/>
      </argument>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="container.env_var_processor" class="Symfony\Component\DependencyInjection\EnvVarProcessor">
      <tag name="container.env_var_processor"/>
      <argument type="service" id="service_container"/>
      <argument type="tagged_iterator" tag="container.env_var_loader"/>
    </service>
    <service id="slugger" class="Symfony\Component\String\Slugger\AsciiSlugger">
      <tag name="kernel.locale_aware"/>
      <argument>en</argument>
    </service>
    <service id="container.getenv" class="Closure">
      <tag name="routing.expression_language_function" function="env"/>
      <argument type="collection">
        <argument type="service" id="service_container"/>
        <argument>getEnv</argument>
      </argument>
      <factory class="Closure" method="fromCallable"/>
    </service>
    <service id="container.env" class="Symfony\Component\String\LazyString" abstract="true">
      <argument type="service" id="container.getenv"/>
      <factory class="Symfony\Component\String\LazyString" method="fromCallable"/>
    </service>
    <service id="fragment.handler" class="Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler">
      <argument type="service" id=".service_locator.lLv4pWF"/>
      <argument type="service" id="request_stack"/>
      <argument>true</argument>
    </service>
    <service id="fragment.renderer.inline" class="Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer">
      <tag name="kernel.fragment_renderer" alias="inline"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="event_dispatcher"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="error_handler.error_renderer.html" class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer">
      <argument type="service">
        <service>
          <argument type="service" id="request_stack"/>
          <argument>true</argument>
          <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="isDebug"/>
        </service>
      </argument>
      <argument>UTF-8</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <argument>/var/www</argument>
      <argument type="service">
        <service>
          <argument type="service" id="request_stack"/>
          <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="getAndCleanOutputBuffer"/>
        </service>
      </argument>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="console.error_listener" class="Symfony\Component\Console\EventListener\ErrorListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="console"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="console.suggest_missing_package_subscriber" class="Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.no_preload"/>
    </service>
    <service id="console.command.about" class="Symfony\Bundle\FrameworkBundle\Command\AboutCommand">
      <tag name="console.command" command="about"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>about</argument>
      </call>
    </service>
    <service id="console.command.assets_install" class="Symfony\Bundle\FrameworkBundle\Command\AssetsInstallCommand">
      <tag name="console.command" command="assets:install"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="filesystem"/>
      <argument>/var/www</argument>
      <call method="setName">
        <argument>assets:install</argument>
      </call>
    </service>
    <service id="console.command.cache_clear" class="Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand">
      <tag name="console.command" command="cache:clear"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache_clearer"/>
      <argument type="service" id="filesystem"/>
      <call method="setName">
        <argument>cache:clear</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_clear" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand">
      <tag name="console.command" command="cache:pool:clear"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache.global_clearer"/>
      <call method="setName">
        <argument>cache:pool:clear</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_prune" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand">
      <tag name="console.command" command="cache:pool:prune"/>
      <tag name="container.no_preload"/>
      <argument type="collection"/>
      <call method="setName">
        <argument>cache:pool:prune</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_delete" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolDeleteCommand">
      <tag name="console.command" command="cache:pool:delete"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache.global_clearer"/>
      <call method="setName">
        <argument>cache:pool:delete</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_list" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolListCommand">
      <tag name="console.command" command="cache:pool:list"/>
      <tag name="container.no_preload"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.annotations</argument>
        <argument>cache.property_info</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:list</argument>
      </call>
    </service>
    <service id="console.command.cache_warmup" class="Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand">
      <tag name="console.command" command="cache:warmup"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache_warmer"/>
      <call method="setName">
        <argument>cache:warmup</argument>
      </call>
    </service>
    <service id="console.command.config_debug" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand">
      <tag name="console.command" command="debug:config"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>debug:config</argument>
      </call>
    </service>
    <service id="console.command.config_dump_reference" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand">
      <tag name="console.command" command="config:dump-reference"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>config:dump-reference</argument>
      </call>
    </service>
    <service id="console.command.container_debug" class="Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand">
      <tag name="console.command" command="debug:container"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>debug:container</argument>
      </call>
    </service>
    <service id="console.command.container_lint" class="Symfony\Bundle\FrameworkBundle\Command\ContainerLintCommand">
      <tag name="console.command" command="lint:container"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>lint:container</argument>
      </call>
    </service>
    <service id="console.command.debug_autowiring" class="Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand">
      <tag name="console.command" command="debug:autowiring"/>
      <tag name="container.no_preload"/>
      <argument>null</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:autowiring</argument>
      </call>
    </service>
    <service id="console.command.event_dispatcher_debug" class="Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand">
      <tag name="console.command" command="debug:event-dispatcher"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="event_dispatcher"/>
      <call method="setName">
        <argument>debug:event-dispatcher</argument>
      </call>
    </service>
    <service id="console.command.router_debug" class="Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand">
      <tag name="console.command" command="debug:router"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:router</argument>
      </call>
    </service>
    <service id="console.command.router_match" class="Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand">
      <tag name="console.command" command="router:match"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="router.default"/>
      <argument type="tagged_iterator" tag="routing.expression_language_provider"/>
      <call method="setName">
        <argument>router:match</argument>
      </call>
    </service>
    <service id="console.command.yaml_lint" class="Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand">
      <tag name="console.command" command="lint:yaml"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>lint:yaml</argument>
      </call>
    </service>
    <service id="console.command.secrets_set" class="Symfony\Bundle\FrameworkBundle\Command\SecretsSetCommand">
      <tag name="console.command" command="secrets:set"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="null"/>
      <call method="setName">
        <argument>secrets:set</argument>
      </call>
    </service>
    <service id="console.command.secrets_remove" class="Symfony\Bundle\FrameworkBundle\Command\SecretsRemoveCommand">
      <tag name="console.command" command="secrets:remove"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="null"/>
      <call method="setName">
        <argument>secrets:remove</argument>
      </call>
    </service>
    <service id="console.command.secrets_generate_key" class="Symfony\Bundle\FrameworkBundle\Command\SecretsGenerateKeysCommand">
      <tag name="console.command" command="secrets:generate-keys"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:generate-keys</argument>
      </call>
    </service>
    <service id="console.command.secrets_list" class="Symfony\Bundle\FrameworkBundle\Command\SecretsListCommand">
      <tag name="console.command" command="secrets:list"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault"/>
      <call method="setName">
        <argument>secrets:list</argument>
      </call>
    </service>
    <service id="console.command.secrets_decrypt_to_local" class="Symfony\Bundle\FrameworkBundle\Command\SecretsDecryptToLocalCommand">
      <tag name="console.command" command="secrets:decrypt-to-local"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:decrypt-to-local</argument>
      </call>
    </service>
    <service id="console.command.secrets_encrypt_from_local" class="Symfony\Bundle\FrameworkBundle\Command\SecretsEncryptFromLocalCommand">
      <tag name="console.command" command="secrets:encrypt-from-local"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault"/>
      <call method="setName">
        <argument>secrets:encrypt-from-local</argument>
      </call>
    </service>
    <service id="cache.app" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>aqN3InANu1</argument>
      <argument>0</argument>
      <argument>/var/www/var/cache/dev/pools</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.app.taggable" class="Symfony\Component\Cache\Adapter\TagAwareAdapter">
      <argument type="service" id="cache.app"/>
    </service>
    <service id="cache.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>FplKveb610</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.validator" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>nBxDQtMTBr</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.serializer" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>uct2QaVBtd</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.annotations" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>DaSegQqWBA</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.property_info" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>B+AlvVTj5f</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.adapter.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" abstract="true">
      <tag name="cache.pool" clearer="cache.system_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.adapter.apcu" class="Symfony\Component\Cache\Adapter\ApcuAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.doctrine" class="Symfony\Component\Cache\Adapter\DoctrineAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_doctrine_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Doctrine provider service</argument>
      <argument></argument>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.filesystem" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>/var/www/var/cache/dev/pools</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.psr6" class="Symfony\Component\Cache\Adapter\ProxyAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_psr6_provider" clearer="cache.default_clearer" reset="reset"/>
      <argument type="abstract">PSR-6 provider service</argument>
      <argument></argument>
      <argument>0</argument>
    </service>
    <service id="cache.adapter.redis" class="Symfony\Component\Cache\Adapter\RedisAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Redis connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.redis_tag_aware" class="Symfony\Component\Cache\Adapter\RedisTagAwareAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Redis connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.memcached" class="Symfony\Component\Cache\Adapter\MemcachedAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_memcached_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Memcached connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.pdo" class="Symfony\Component\Cache\Adapter\PdoAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_pdo_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">PDO connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="collection"/>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.array" class="Symfony\Component\Cache\Adapter\ArrayAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.default_marshaller" class="Symfony\Component\Cache\Marshaller\DefaultMarshaller">
      <argument>null</argument>
    </service>
    <service id="cache.default_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.system_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <tag name="kernel.cache_clearer"/>
      <argument type="collection">
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.global_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id=".cache_connection.GD_MSZC" class="Symfony\Component\Cache\Adapter\AbstractAdapter">
      <argument>redis://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createConnection"/>
    </service>
    <service id=".cache_connection.JKE6keX" class="Symfony\Component\Cache\Adapter\AbstractAdapter">
      <argument>memcached://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createConnection"/>
    </service>
    <service id="cache.property_access" class="Symfony\Component\Cache\Adapter\ArrayAdapter">
      <argument>0</argument>
      <argument>false</argument>
    </service>
    <service id="session" class="Symfony\Component\HttpFoundation\Session\Session" public="true">
      <argument type="service" id="session.storage.native"/>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="collection">
        <argument type="service" id="session_listener"/>
        <argument>onSessionUsage</argument>
      </argument>
    </service>
    <service id="session.storage.metadata_bag" class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag">
      <argument>_sf2_meta</argument>
      <argument>0</argument>
    </service>
    <service id="session.storage.native" class="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage">
      <argument>%session.storage.options%</argument>
      <argument>null</argument>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.storage.php_bridge" class="Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage">
      <argument>null</argument>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.flash_bag" class="Symfony\Component\HttpFoundation\Session\Flash\FlashBag">
      <factory service="session" method="getFlashBag"/>
      <deprecated package="symfony/framework-bundle" version="5.1">The "%service_id%" service is deprecated, use "$session-&gt;getFlashBag()" instead.</deprecated>
    </service>
    <service id="session.attribute_bag" class="Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag">
      <argument>attributes</argument>
      <factory service="session" method="getBag"/>
      <deprecated package="symfony/framework-bundle" version="5.1">The "%service_id%" service is deprecated, use "$session-&gt;getAttributeBag()" instead.</deprecated>
    </service>
    <service id="session.storage.mock_file" class="Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage">
      <argument>/var/www/var/cache/dev/sessions</argument>
      <argument>MOCKSESSID</argument>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.handler.native_file" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler">
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler">
          <argument>/var/www/var/cache/dev/sessions</argument>
        </service>
      </argument>
    </service>
    <service id="session.abstract_handler" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler">
      <argument type="abstract">A string or a connection object</argument>
      <factory class="Symfony\Component\HttpFoundation\Session\Storage\Handler\SessionHandlerFactory" method="createHandler"/>
    </service>
    <service id="session_listener" class="Symfony\Component\HttpKernel\EventListener\SessionListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id=".service_locator.LrY.obc"/>
      <argument>true</argument>
    </service>
    <service id="session.marshaller" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\IdentityMarshaller"/>
    <service id="debug.debug_handlers_listener" class="Symfony\Component\HttpKernel\EventListener\DebugHandlersListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="php"/>
      <tag name="container.hot_path"/>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>-1</argument>
      <argument>true</argument>
      <argument type="service" id="debug.file_link_formatter"/>
      <argument>true</argument>
      <argument>null</argument>
    </service>
    <service id="debug.file_link_formatter" class="Symfony\Component\HttpKernel\Debug\FileLinkFormatter">
      <argument>null</argument>
    </service>
    <service id="routing.resolver" class="Symfony\Component\Config\Loader\LoaderResolver">
      <call method="addLoader">
        <argument type="service" id="routing.loader.xml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.php"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.glob"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.container"/>
      </call>
    </service>
    <service id="routing.loader.xml" class="Symfony\Component\Routing\Loader\XmlFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.yml" class="Symfony\Component\Routing\Loader\YamlFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.php" class="Symfony\Component\Routing\Loader\PhpFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.glob" class="Symfony\Component\Routing\Loader\GlobFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.directory" class="Symfony\Component\Routing\Loader\DirectoryLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.container" class="Symfony\Component\Routing\Loader\ContainerLoader">
      <tag name="routing.loader"/>
      <argument type="service" id=".service_locator.kODoftA"/>
    </service>
    <service id="routing.loader" class="Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader" public="true">
      <argument type="service" id="routing.resolver"/>
      <argument type="collection">
        <argument key="utf8">true</argument>
      </argument>
      <argument type="collection"/>
    </service>
    <service id="router.default" class="Symfony\Bundle\FrameworkBundle\Routing\Router">
      <tag name="monolog.logger" channel="router"/>
      <tag name="container.service_subscriber" id="routing.loader"/>
      <argument type="service" id=".service_locator.WOytlHA.router.default"/>
      <argument>kernel::loadRoutes</argument>
      <argument type="collection">
        <argument key="cache_dir">/var/www/var/cache/dev</argument>
        <argument key="debug">true</argument>
        <argument key="generator_class">Symfony\Component\Routing\Generator\CompiledUrlGenerator</argument>
        <argument key="generator_dumper_class">Symfony\Component\Routing\Generator\Dumper\CompiledUrlGeneratorDumper</argument>
        <argument key="matcher_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableCompiledUrlMatcher</argument>
        <argument key="matcher_dumper_class">Symfony\Component\Routing\Matcher\Dumper\CompiledUrlMatcherDumper</argument>
        <argument key="strict_requirements">true</argument>
        <argument key="resource_type">service</argument>
      </argument>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="parameter_bag" on-invalid="ignore"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument>en</argument>
      <call method="setConfigCacheFactory">
        <argument type="service" id="config_cache_factory"/>
      </call>
      <call method="addExpressionLanguageProvider">
        <argument type="service" id="router.expression_language_provider"/>
      </call>
    </service>
    <service id="router.request_context" class="Symfony\Component\Routing\RequestContext">
      <argument></argument>
      <argument>localhost</argument>
      <argument>http</argument>
      <argument>80</argument>
      <argument>443</argument>
      <call method="setParameter">
        <argument>_functions</argument>
        <argument type="service" id="router.expression_language_provider" on-invalid="ignore"/>
      </call>
      <factory class="Symfony\Component\Routing\RequestContext" method="fromUri"/>
    </service>
    <service id="router.expression_language_provider" class="Symfony\Component\Routing\Matcher\ExpressionLanguageProvider">
      <tag name="routing.expression_language_provider"/>
      <argument type="service" id=".service_locator.1ZPWTRB"/>
    </service>
    <service id="router.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer">
      <tag name="container.service_subscriber" id="router"/>
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id=".service_locator.HLwzKIm.router.cache_warmer"/>
    </service>
    <service id="router_listener" class="Symfony\Component\HttpKernel\EventListener\RouterListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument>/var/www</argument>
      <argument>true</argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" class="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" public="true">
      <argument type="service" id="router.default"/>
      <argument type="service">
        <service class="int">
          <factory service="router.request_context" method="getHttpPort"/>
        </service>
      </argument>
      <argument type="service">
        <service class="int">
          <factory service="router.request_context" method="getHttpsPort"/>
        </service>
      </argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" class="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" public="true">
      <argument type="service" id="twig" on-invalid="ignore"/>
    </service>
    <service id="property_accessor" class="Symfony\Component\PropertyAccess\PropertyAccessor">
      <argument>3</argument>
      <argument>false</argument>
      <argument type="service" id="cache.property_access" on-invalid="ignore"/>
      <argument>true</argument>
      <argument type="service" id="property_info.reflection_extractor" on-invalid="null"/>
      <argument type="service" id="property_info.reflection_extractor" on-invalid="null"/>
    </service>
    <service id="secrets.vault" class="Symfony\Bundle\FrameworkBundle\Secrets\SodiumVault">
      <tag name="container.env_var_loader"/>
      <argument>/var/www/config/secrets/%env(default:kernel.environment:APP_RUNTIME_ENV)%</argument>
      <argument type="service" id="secrets.decryption_key" on-invalid="ignore"/>
    </service>
    <service id="secrets.decryption_key" class="Symfony\Component\String\LazyString">
      <argument type="service" id="container.getenv"/>
      <argument>base64:default::SYMFONY_DECRYPTION_SECRET</argument>
      <factory class="Symfony\Component\String\LazyString" method="fromCallable"/>
    </service>
    <service id="secrets.local_vault" class="Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault">
      <argument>/var/www/.env.dev.local</argument>
    </service>
    <service id="property_info" class="Symfony\Component\PropertyInfo\PropertyInfoExtractor">
      <argument type="iterator">
        <argument type="service" id="property_info.reflection_extractor"/>
      </argument>
      <argument type="iterator">
        <argument type="service" id="property_info.reflection_extractor"/>
      </argument>
      <argument type="iterator"/>
      <argument type="iterator">
        <argument type="service" id="property_info.reflection_extractor"/>
      </argument>
      <argument type="iterator">
        <argument type="service" id="property_info.reflection_extractor"/>
      </argument>
    </service>
    <service id="property_info.reflection_extractor" class="Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor">
      <tag name="property_info.list_extractor" priority="-1000"/>
      <tag name="property_info.type_extractor" priority="-1002"/>
      <tag name="property_info.access_extractor" priority="-1000"/>
      <tag name="property_info.initializable_extractor" priority="-1000"/>
    </service>
    <service id="Overblog\GraphQLBundle\Executor\Executor" class="Overblog\GraphQLBundle\Executor\Executor"/>
    <service id="Overblog\GraphQLBundle\Request\Parser" class="Overblog\GraphQLBundle\Request\Parser"/>
    <service id="Overblog\GraphQLBundle\Request\BatchParser" class="Overblog\GraphQLBundle\Request\BatchParser"/>
    <service id="Overblog\GraphQLBundle\Definition\GlobalVariables" class="Overblog\GraphQLBundle\Definition\GlobalVariables">
      <argument type="collection">
        <argument key="container" type="service" id="service_container"/>
        <argument key="typeResolver" type="service" id="Overblog\GraphQLBundle\Resolver\TypeResolver"/>
        <argument key="resolverResolver" type="service" id="Overblog\GraphQLBundle\Resolver\ResolverResolver"/>
        <argument key="mutationResolver" type="service" id="Overblog\GraphQLBundle\Resolver\MutationResolver"/>
        <argument key="argumentFactory" type="service" id="Overblog\GraphQLBundle\Definition\ArgumentFactory"/>
        <argument key="security" type="service" id="Overblog\GraphQLBundle\Security\Security"/>
      </argument>
    </service>
    <service id="GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter" class="GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter"/>
    <service id="Overblog\GraphQLBundle\Executor\Promise\Adapter\ReactPromiseAdapter" class="Overblog\GraphQLBundle\Executor\Promise\Adapter\ReactPromiseAdapter"/>
    <service id="Overblog\GraphQLBundle\Resolver\FieldResolver" class="Overblog\GraphQLBundle\Resolver\FieldResolver"/>
    <service id="Overblog\GraphQLBundle\Request\Executor" class="Overblog\GraphQLBundle\Request\Executor">
      <argument type="service" id="Overblog\GraphQLBundle\Executor\Executor"/>
      <argument type="service" id="GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter"/>
      <argument type="service" id="event_dispatcher"/>
      <argument type="service" id="Overblog\GraphQLBundle\Resolver\FieldResolver"/>
      <argument>false</argument>
      <call method="setMaxQueryComplexity">
        <argument>0</argument>
      </call>
      <call method="setMaxQueryDepth">
        <argument>0</argument>
      </call>
      <call method="addSchemaBuilder">
        <argument>default</argument>
        <argument type="service" id="overblog_graphql.schema_builder_default"/>
      </call>
      <call method="enableIntrospectionQuery"/>
    </service>
    <service id="Overblog\GraphQLBundle\Definition\Builder\SchemaBuilder" class="Overblog\GraphQLBundle\Definition\Builder\SchemaBuilder">
      <argument type="service" id="Overblog\GraphQLBundle\Resolver\TypeResolver"/>
      <argument>true</argument>
    </service>
    <service id="Overblog\GraphQLBundle\Definition\Builder\TypeFactory" class="Overblog\GraphQLBundle\Definition\Builder\TypeFactory">
      <argument type="service" id="Overblog\GraphQLBundle\Definition\ConfigProcessor"/>
      <argument type="service" id="Overblog\GraphQLBundle\Definition\GlobalVariables"/>
    </service>
    <service id="Overblog\GraphQLBundle\Resolver\TypeResolver" class="Overblog\GraphQLBundle\Resolver\TypeResolver">
      <tag name="overblog_graphql.global_variable" alias="typeResolver"/>
      <call method="setDispatcher">
        <argument type="service" id="event_dispatcher"/>
      </call>
      <call method="addSolution">
        <argument>overblog_graphql.definition.string_type</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>overblog_graphql.definition.string_type</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>String</argument>
        </argument>
        <argument type="collection">
          <argument key="id">overblog_graphql.definition.string_type</argument>
          <argument key="aliases" type="collection">
            <argument>String</argument>
          </argument>
          <argument key="alias">String</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>overblog_graphql.definition.int_type</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>overblog_graphql.definition.int_type</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Int</argument>
        </argument>
        <argument type="collection">
          <argument key="id">overblog_graphql.definition.int_type</argument>
          <argument key="aliases" type="collection">
            <argument>Int</argument>
          </argument>
          <argument key="alias">Int</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>overblog_graphql.definition.float_type</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>overblog_graphql.definition.float_type</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Float</argument>
        </argument>
        <argument type="collection">
          <argument key="id">overblog_graphql.definition.float_type</argument>
          <argument key="aliases" type="collection">
            <argument>Float</argument>
          </argument>
          <argument key="alias">Float</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>overblog_graphql.definition.boolean_type</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>overblog_graphql.definition.boolean_type</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Boolean</argument>
        </argument>
        <argument type="collection">
          <argument key="id">overblog_graphql.definition.boolean_type</argument>
          <argument key="aliases" type="collection">
            <argument>Boolean</argument>
          </argument>
          <argument key="alias">Boolean</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>overblog_graphql.definition.id_type</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>overblog_graphql.definition.id_type</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>ID</argument>
        </argument>
        <argument type="collection">
          <argument key="id">overblog_graphql.definition.id_type</argument>
          <argument key="aliases" type="collection">
            <argument>ID</argument>
          </argument>
          <argument key="alias">ID</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\QueryType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\QueryType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>Query</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\QueryType</argument>
          <argument key="aliases" type="collection">
            <argument>Query</argument>
          </argument>
          <argument key="alias">Query</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ShortnnerUrlType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ShortnnerUrlType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>ShortnnerUrl</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\ShortnnerUrlType</argument>
          <argument key="aliases" type="collection">
            <argument>ShortnnerUrl</argument>
          </argument>
          <argument key="alias">ShortnnerUrl</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\__DEFINITIONS__\PageInfoType</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\__DEFINITIONS__\PageInfoType</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>PageInfo</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\__DEFINITIONS__\PageInfoType</argument>
          <argument key="aliases" type="collection">
            <argument>PageInfo</argument>
          </argument>
          <argument key="alias">PageInfo</argument>
          <argument key="generated">true</argument>
        </argument>
      </call>
    </service>
    <service id="Overblog\GraphQLBundle\Transformer\ArgumentsTransformer" class="Overblog\GraphQLBundle\Transformer\ArgumentsTransformer">
      <argument>null</argument>
      <argument type="collection"/>
    </service>
    <service id="Overblog\GraphQLBundle\Resolver\ResolverResolver" class="Overblog\GraphQLBundle\Resolver\ResolverResolver">
      <tag name="overblog_graphql.global_variable" alias="resolverResolver" public=""/>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\ShortnnerUrlResolver</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\ShortnnerUrlResolver</argument>
          </argument>
        </argument>
        <argument type="collection"/>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\ShortnnerUrlResolver</argument>
          <argument key="aliases" type="collection"/>
          <argument key="method">__invoke</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>App\GraphQL\Resolver\ShortnnerUrlResolver::resolve</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>App\GraphQL\Resolver\ShortnnerUrlResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>ShortnnerUrl</argument>
        </argument>
        <argument type="collection">
          <argument key="id">App\GraphQL\Resolver\ShortnnerUrlResolver</argument>
          <argument key="aliases" type="collection">
            <argument>ShortnnerUrl</argument>
          </argument>
          <argument key="method">resolve</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\GraphQL\Relay\Mutation\MutationFieldResolver</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\GraphQL\Relay\Mutation\MutationFieldResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>relay_mutation_field</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\GraphQL\Relay\Mutation\MutationFieldResolver</argument>
          <argument key="aliases" type="collection">
            <argument>relay_mutation_field</argument>
          </argument>
          <argument key="method">__invoke</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\GraphQL\Relay\Node\GlobalIdFieldResolver</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\GraphQL\Relay\Node\GlobalIdFieldResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>relay_globalid_field</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\GraphQL\Relay\Node\GlobalIdFieldResolver</argument>
          <argument key="aliases" type="collection">
            <argument>relay_globalid_field</argument>
          </argument>
          <argument key="method">__invoke</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\GraphQL\Relay\Node\NodeFieldResolver</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\GraphQL\Relay\Node\NodeFieldResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>relay_node_field</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\GraphQL\Relay\Node\NodeFieldResolver</argument>
          <argument key="aliases" type="collection">
            <argument>relay_node_field</argument>
          </argument>
          <argument key="method">__invoke</argument>
        </argument>
      </call>
      <call method="addSolution">
        <argument>Overblog\GraphQLBundle\GraphQL\Relay\Node\PluralIdentifyingRootFieldResolver</argument>
        <argument type="collection">
          <argument type="collection">
            <argument type="service" id="service_container"/>
            <argument>get</argument>
          </argument>
          <argument type="collection">
            <argument>Overblog\GraphQLBundle\GraphQL\Relay\Node\PluralIdentifyingRootFieldResolver</argument>
          </argument>
        </argument>
        <argument type="collection">
          <argument>relay_plural_identifying_field</argument>
        </argument>
        <argument type="collection">
          <argument key="id">Overblog\GraphQLBundle\GraphQL\Relay\Node\PluralIdentifyingRootFieldResolver</argument>
          <argument key="aliases" type="collection">
            <argument>relay_plural_identifying_field</argument>
          </argument>
          <argument key="method">__invoke</argument>
        </argument>
      </call>
    </service>
    <service id="Overblog\GraphQLBundle\Resolver\MutationResolver" class="Overblog\GraphQLBundle\Resolver\MutationResolver">
      <tag name="overblog_graphql.global_variable" alias="mutationResolver" public=""/>
    </service>
    <service id="Overblog\GraphQLBundle\Resolver\AccessResolver" class="Overblog\GraphQLBundle\Resolver\AccessResolver">
      <argument type="service" id="GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionLanguage" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionLanguage">
      <argument>null</argument>
      <call method="addGlobalName">
        <argument>globalVariable-&gt;get('typeResolver')</argument>
        <argument>typeResolver</argument>
      </call>
      <call method="addGlobalName">
        <argument>globalVariable-&gt;get('argumentFactory')</argument>
        <argument>argumentFactory</argument>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Call"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Parameter"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Service"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Arguments"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\IsTypeOf"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Mutation"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\FromGlobalID"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\GlobalID"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\IdFetcherCallback"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\MutateAndGetPayloadCallback"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\ResolveSingleInputCallback"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Resolver"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\NewObject"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\GetUser"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyPermission"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyRole"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasPermission"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasRole"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAnonymous"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAuthenticated"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsFullyAuthenticated"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsGranted"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsRememberMe"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="expression_function.parameter_alias"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="expression_function.service_alias"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="expression_function.mutation_alias"/>
      </call>
      <call method="addFunction">
        <argument type="service" id="expression_function.resolver_alias"/>
      </call>
    </service>
    <service id="Overblog\GraphQLBundle\Generator\TypeGenerator" class="Overblog\GraphQLBundle\Generator\TypeGenerator">
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__</argument>
      <argument type="collection">
        <argument>/var/www/vendor/overblog/graphql-bundle/src/Resources/skeleton</argument>
      </argument>
      <argument>null</argument>
      <argument>%overblog_graphql_types.config%</argument>
      <argument>true</argument>
      <argument>null</argument>
      <argument>/var/www/var/cache/dev</argument>
      <argument>null</argument>
      <call method="addUseStatement">
        <argument>Overblog\GraphQLBundle\Definition\ConfigProcessor</argument>
      </call>
      <call method="addUseStatement">
        <argument>Overblog\GraphQLBundle\Definition\LazyConfig</argument>
      </call>
      <call method="addUseStatement">
        <argument>Overblog\GraphQLBundle\Definition\GlobalVariables</argument>
      </call>
      <call method="addImplement">
        <argument>Overblog\GraphQLBundle\Definition\Type\GeneratedTypeInterface</argument>
      </call>
      <call method="setExpressionLanguage">
        <argument type="service" id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionLanguage"/>
      </call>
    </service>
    <service id="Overblog\GraphQLBundle\Definition\ArgumentFactory" class="Overblog\GraphQLBundle\Definition\ArgumentFactory">
      <tag name="overblog_graphql.global_variable" alias="argumentFactory"/>
      <argument>Overblog\GraphQLBundle\Definition\Argument</argument>
    </service>
    <service id="Overblog\GraphQLBundle\Controller\GraphController" class="Overblog\GraphQLBundle\Controller\GraphController" public="true">
      <argument type="service" id="Overblog\GraphQLBundle\Request\BatchParser"/>
      <argument type="service" id="Overblog\GraphQLBundle\Request\Executor"/>
      <argument type="service" id="Overblog\GraphQLBundle\Request\Parser"/>
      <argument>false</argument>
      <argument>relay</argument>
    </service>
    <service id="Overblog\GraphQLBundle\Definition\ConfigProcessor" class="Overblog\GraphQLBundle\Definition\ConfigProcessor">
      <argument type="collection">
        <argument type="service" id="Overblog\GraphQLBundle\Definition\ConfigProcessor\PublicFieldsFilterConfigProcessor"/>
        <argument type="service" id="Overblog\GraphQLBundle\Definition\ConfigProcessor\AclConfigProcessor"/>
        <argument type="service" id="Overblog\GraphQLBundle\Definition\ConfigProcessor\WrapArgumentConfigProcessor"/>
      </argument>
    </service>
    <service id="Overblog\GraphQLBundle\Validator\Formatter" class="Overblog\GraphQLBundle\Validator\Formatter">
      <tag name="kernel.event_listener" event="graphql.error_formatting" method="onErrorFormatting"/>
    </service>
    <service id="Overblog\GraphQLBundle\Security\Security" class="Overblog\GraphQLBundle\Security\Security">
      <tag name="overblog_graphql.global_variable" alias="security" public=""/>
      <argument>null</argument>
    </service>
    <service id="Overblog\GraphQLBundle\Command\GraphQLDumpSchemaCommand" class="Overblog\GraphQLBundle\Command\GraphQLDumpSchemaCommand" public="true">
      <tag name="console.command" command="graphql:dump-schema" alias="graph:dump-schema"/>
      <tag name="container.no_preload"/>
      <argument>/var/www/var/cache/dev/../..</argument>
      <argument type="service" id="Overblog\GraphQLBundle\Request\Executor"/>
      <call method="setName">
        <argument>graphql:dump-schema</argument>
      </call>
    </service>
    <service id="Overblog\GraphQLBundle\Command\DebugCommand" class="Overblog\GraphQLBundle\Command\DebugCommand" public="true">
      <tag name="console.command" command="graphql:debug" alias="debug:graphql"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="Overblog\GraphQLBundle\Resolver\TypeResolver"/>
      <argument type="service" id="Overblog\GraphQLBundle\Resolver\MutationResolver"/>
      <argument type="service" id="Overblog\GraphQLBundle\Resolver\ResolverResolver"/>
      <call method="setName">
        <argument>graphql:debug</argument>
      </call>
    </service>
    <service id="Overblog\GraphQLBundle\Command\CompileCommand" class="Overblog\GraphQLBundle\Command\CompileCommand" public="true">
      <tag name="console.command" command="graphql:compile"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="Overblog\GraphQLBundle\Generator\TypeGenerator"/>
      <call method="setName">
        <argument>graphql:compile</argument>
      </call>
    </service>
    <service id="Overblog\GraphQLBundle\Command\ValidateCommand" class="Overblog\GraphQLBundle\Command\ValidateCommand" public="true">
      <tag name="console.command" command="graphql:validate"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="Overblog\GraphQLBundle\Request\Executor"/>
      <call method="setName">
        <argument>graphql:validate</argument>
      </call>
    </service>
    <service id="Overblog\GraphQLBundle\EventListener\RequestFilesListener" class="Overblog\GraphQLBundle\EventListener\RequestFilesListener">
      <tag name="kernel.event_listener" event="graphql.executor.context" method="onExecutorContextEvent"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="Overblog\GraphQLBundle\EventListener\TypeDecoratorListener" class="Overblog\GraphQLBundle\EventListener\TypeDecoratorListener">
      <tag name="kernel.event_listener" event="graphql.type_loaded" method="onTypeLoaded"/>
      <argument type="service" id="Overblog\GraphQLBundle\Definition\ArgumentFactory"/>
    </service>
    <service id="Overblog\GraphQLBundle\EventListener\ValidationErrorsListener" class="Overblog\GraphQLBundle\EventListener\ValidationErrorsListener">
      <tag name="kernel.event_listener" event="graphql.error_formatting" method="onErrorFormatting"/>
    </service>
    <service id="overblog_graphql.definition.string_type" class="GraphQL\Type\Definition\StringType" public="true">
      <tag name="overblog_graphql.type" alias="String"/>
      <factory class="GraphQL\Type\Definition\Type" method="string"/>
    </service>
    <service id="overblog_graphql.definition.int_type" class="GraphQL\Type\Definition\IntType" public="true">
      <tag name="overblog_graphql.type" alias="Int"/>
      <factory class="GraphQL\Type\Definition\Type" method="int"/>
    </service>
    <service id="overblog_graphql.definition.float_type" class="GraphQL\Type\Definition\FloatType" public="true">
      <tag name="overblog_graphql.type" alias="Float"/>
      <factory class="GraphQL\Type\Definition\Type" method="Float"/>
    </service>
    <service id="overblog_graphql.definition.boolean_type" class="GraphQL\Type\Definition\BooleanType" public="true">
      <tag name="overblog_graphql.type" alias="Boolean"/>
      <factory class="GraphQL\Type\Definition\Type" method="boolean"/>
    </service>
    <service id="overblog_graphql.definition.id_type" class="GraphQL\Type\Definition\IDType" public="true">
      <tag name="overblog_graphql.type" alias="ID"/>
      <factory class="GraphQL\Type\Definition\Type" method="id"/>
    </service>
    <service id="Overblog\GraphQLBundle\GraphQL\Relay\Mutation\MutationFieldResolver" class="Overblog\GraphQLBundle\GraphQL\Relay\Mutation\MutationFieldResolver" public="true" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.resolver"/>
      <tag name="overblog_graphql.resolver" method="__invoke"/>
      <tag name="overblog_graphql.resolver" alias="relay_mutation_field" method="__invoke"/>
      <argument type="service" id="GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter"/>
      <argument type="service" id="Overblog\GraphQLBundle\Definition\ArgumentFactory"/>
    </service>
    <service id="Overblog\GraphQLBundle\GraphQL\Relay\Node\GlobalIdFieldResolver" class="Overblog\GraphQLBundle\GraphQL\Relay\Node\GlobalIdFieldResolver" public="true" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.resolver"/>
      <tag name="overblog_graphql.resolver" method="__invoke"/>
      <tag name="overblog_graphql.resolver" alias="relay_globalid_field" method="__invoke"/>
    </service>
    <service id="Overblog\GraphQLBundle\GraphQL\Relay\Node\NodeFieldResolver" class="Overblog\GraphQLBundle\GraphQL\Relay\Node\NodeFieldResolver" public="true" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.resolver"/>
      <tag name="overblog_graphql.resolver" method="__invoke"/>
      <tag name="overblog_graphql.resolver" alias="relay_node_field" method="__invoke"/>
    </service>
    <service id="Overblog\GraphQLBundle\GraphQL\Relay\Node\PluralIdentifyingRootFieldResolver" class="Overblog\GraphQLBundle\GraphQL\Relay\Node\PluralIdentifyingRootFieldResolver" public="true" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.resolver"/>
      <tag name="overblog_graphql.resolver" method="__invoke"/>
      <tag name="overblog_graphql.resolver" alias="relay_plural_identifying_field" method="__invoke"/>
      <argument type="service" id="GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Call" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Call" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Parameter" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Parameter" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Service" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Service" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Arguments" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Arguments" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\IsTypeOf" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\IsTypeOf" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Mutation" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Mutation" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\FromGlobalID" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\FromGlobalID" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\GlobalID" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\GlobalID" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\IdFetcherCallback" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\IdFetcherCallback" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\MutateAndGetPayloadCallback" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\MutateAndGetPayloadCallback" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\ResolveSingleInputCallback" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\ResolveSingleInputCallback" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Resolver" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Resolver" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\NewObject" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\NewObject" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\GetUser" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\GetUser" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyPermission" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyPermission" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyRole" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyRole" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasPermission" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasPermission" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasRole" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasRole" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\Helper" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\Helper" autowire="true" autoconfigure="true"/>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAnonymous" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAnonymous" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAuthenticated" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAuthenticated" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsFullyAuthenticated" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsFullyAuthenticated" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsGranted" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsGranted" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsRememberMe" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsRememberMe" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
    </service>
    <service id="expression_function.parameter_alias" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Parameter" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
      <argument>param</argument>
    </service>
    <service id="expression_function.service_alias" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Service" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
      <argument>serv</argument>
    </service>
    <service id="expression_function.mutation_alias" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Mutation" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
      <argument>mut</argument>
    </service>
    <service id="expression_function.resolver_alias" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Resolver" autowire="true" autoconfigure="true">
      <tag name="overblog_graphql.expression_function"/>
      <argument>res</argument>
    </service>
    <service id="Overblog\GraphQLBundle\Definition\ConfigProcessor\PublicFieldsFilterConfigProcessor" class="Overblog\GraphQLBundle\Definition\ConfigProcessor\PublicFieldsFilterConfigProcessor">
      <tag name="overblog_graphql.definition_config_processor" priority="2048"/>
    </service>
    <service id="Overblog\GraphQLBundle\Definition\ConfigProcessor\AclConfigProcessor" class="Overblog\GraphQLBundle\Definition\ConfigProcessor\AclConfigProcessor">
      <tag name="overblog_graphql.definition_config_processor" priority="512"/>
      <argument type="service" id="Overblog\GraphQLBundle\Resolver\AccessResolver"/>
      <argument type="service" id="Overblog\GraphQLBundle\Resolver\FieldResolver"/>
    </service>
    <service id="Overblog\GraphQLBundle\Definition\ConfigProcessor\WrapArgumentConfigProcessor" class="Overblog\GraphQLBundle\Definition\ConfigProcessor\WrapArgumentConfigProcessor">
      <tag name="overblog_graphql.definition_config_processor"/>
      <argument type="service" id="Overblog\GraphQLBundle\Definition\ArgumentFactory"/>
    </service>
    <service id="overblog_graphql.schema_builder_default" class="Closure">
      <argument>default</argument>
      <argument>Query</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="collection"/>
      <factory service="Overblog\GraphQLBundle\Definition\Builder\SchemaBuilder" method="getBuilder"/>
    </service>
    <service id="overblog_graphql.schema_default" class="GraphQL\Type\Schema">
      <factory service="overblog_graphql.schema_builder_default" method="call"/>
    </service>
    <service id="Overblog\GraphQLBundle\Error\ExceptionConverter" class="Overblog\GraphQLBundle\Error\ExceptionConverter">
      <argument type="collection"/>
      <argument>false</argument>
    </service>
    <service id="Overblog\GraphQLBundle\Error\ErrorHandler" class="Overblog\GraphQLBundle\Error\ErrorHandler">
      <argument type="service" id="event_dispatcher"/>
      <argument type="service" id="Overblog\GraphQLBundle\Error\ExceptionConverter"/>
    </service>
    <service id="Overblog\GraphQLBundle\EventListener\ErrorHandlerListener" class="Overblog\GraphQLBundle\EventListener\ErrorHandlerListener">
      <tag name="kernel.event_listener" event="graphql.post_executor" method="onPostExecutor"/>
      <argument type="service" id="Overblog\GraphQLBundle\Error\ErrorHandler"/>
      <argument>false</argument>
      <argument>true</argument>
    </service>
    <service id="Overblog\GraphQLBundle\EventListener\ErrorLoggerListener" class="Overblog\GraphQLBundle\EventListener\ErrorLoggerListener" public="true">
      <tag name="kernel.event_listener" event="graphql.error_formatting" method="onErrorFormatting"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="overblog_graphql.event_listener.classloader_listener" class="Overblog\GraphQLBundle\EventListener\ClassLoaderListener" public="true">
      <tag name="kernel.event_listener" event="kernel.request" method="load" priority="255"/>
      <tag name="kernel.event_listener" event="console.command" method="load" priority="255"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="Overblog\GraphQLBundle\Generator\TypeGenerator"/>
    </service>
    <service id="Overblog\GraphQLBundle\CacheWarmer\CompileCacheWarmer" class="Overblog\GraphQLBundle\CacheWarmer\CompileCacheWarmer">
      <tag name="kernel.cache_warmer" priority="50"/>
      <argument type="service" id="Overblog\GraphQLBundle\Generator\TypeGenerator"/>
      <argument>true</argument>
    </service>
    <service id="twig" class="Twig\Environment" public="true">
      <tag name="container.preload" class="Twig\Cache\FilesystemCache"/>
      <tag name="container.preload" class="Twig\Extension\CoreExtension"/>
      <tag name="container.preload" class="Twig\Extension\EscaperExtension"/>
      <tag name="container.preload" class="Twig\Extension\OptimizerExtension"/>
      <tag name="container.preload" class="Twig\Extension\StagingExtension"/>
      <tag name="container.preload" class="Twig\ExtensionSet"/>
      <tag name="container.preload" class="Twig\Template"/>
      <tag name="container.preload" class="Twig\TemplateWrapper"/>
      <tag name="container.private" package="symfony/twig-bundle" version="5.2"/>
      <argument type="service" id="twig.loader.native_filesystem"/>
      <argument type="collection">
        <argument key="autoescape">name</argument>
        <argument key="cache">/var/www/var/cache/dev/twig</argument>
        <argument key="charset">UTF-8</argument>
        <argument key="debug">true</argument>
        <argument key="strict_variables">true</argument>
      </argument>
      <call method="addExtension">
        <argument type="service" id="twig.extension.profiler"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.trans"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.code"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.routing"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.yaml"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.expression"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.httpkernel"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.httpfoundation"/>
      </call>
      <call method="addExtension">
        <argument type="service" id="twig.extension.debug"/>
      </call>
      <call method="addGlobal">
        <argument>app</argument>
        <argument type="service" id="twig.app_variable"/>
      </call>
      <call method="addRuntimeLoader">
        <argument type="service" id="twig.runtime_loader"/>
      </call>
      <configurator service="twig.configurator.environment" method="configure"/>
    </service>
    <service id="twig.app_variable" class="Symfony\Bridge\Twig\AppVariable">
      <call method="setEnvironment">
        <argument>dev</argument>
      </call>
      <call method="setDebug">
        <argument>true</argument>
      </call>
      <call method="setRequestStack">
        <argument type="service" id="request_stack" on-invalid="ignore"/>
      </call>
    </service>
    <service id="twig.template_iterator" class="Symfony\Bundle\TwigBundle\TemplateIterator">
      <argument type="service" id="kernel"/>
      <argument type="collection"/>
      <argument>/var/www/templates</argument>
    </service>
    <service id="twig.template_cache_warmer" class="Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheWarmer">
      <tag name="kernel.cache_warmer"/>
      <tag name="container.service_subscriber" id="twig"/>
      <argument type="service" id=".service_locator.aq4MYft.twig.template_cache_warmer"/>
      <argument type="service" id="twig.template_iterator"/>
    </service>
    <service id="twig.loader.native_filesystem" class="Twig\Loader\FilesystemLoader">
      <tag name="twig.loader"/>
      <argument type="collection"/>
      <argument>/var/www</argument>
      <call method="addPath">
        <argument>/var/www/vendor/overblog/graphiql-bundle/Resources/views</argument>
        <argument>OverblogGraphiQL</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/vendor/overblog/graphiql-bundle/Resources/views</argument>
        <argument>!OverblogGraphiQL</argument>
      </call>
      <call method="addPath">
        <argument>/var/www/templates</argument>
      </call>
    </service>
    <service id="twig.loader.chain" class="Twig\Loader\ChainLoader"/>
    <service id="twig.extension.profiler" class="Symfony\Bridge\Twig\Extension\ProfilerExtension">
      <tag name="twig.extension"/>
      <argument type="service" id="twig.profile"/>
      <argument>null</argument>
    </service>
    <service id="twig.profile" class="Twig\Profiler\Profile"/>
    <service id="data_collector.twig" class="Symfony\Bridge\Twig\DataCollector\TwigDataCollector">
      <tag name="data_collector" template="@WebProfiler/Collector/twig.html.twig" id="twig" priority="257"/>
      <argument type="service" id="twig.profile"/>
      <argument type="service" id="twig"/>
    </service>
    <service id="twig.extension.trans" class="Symfony\Bridge\Twig\Extension\TranslationExtension">
      <tag name="twig.extension"/>
      <argument>null</argument>
    </service>
    <service id="twig.extension.code" class="Symfony\Bridge\Twig\Extension\CodeExtension">
      <tag name="twig.extension"/>
      <argument type="service" id="debug.file_link_formatter" on-invalid="ignore"/>
      <argument>/var/www</argument>
      <argument>UTF-8</argument>
    </service>
    <service id="twig.extension.routing" class="Symfony\Bridge\Twig\Extension\RoutingExtension">
      <tag name="twig.extension"/>
      <argument type="service" id="router.default"/>
    </service>
    <service id="twig.extension.yaml" class="Symfony\Bridge\Twig\Extension\YamlExtension">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.extension.debug.stopwatch" class="Symfony\Bridge\Twig\Extension\StopwatchExtension">
      <argument>null</argument>
      <argument>true</argument>
    </service>
    <service id="twig.extension.expression" class="Symfony\Bridge\Twig\Extension\ExpressionExtension">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.extension.httpkernel" class="Symfony\Bridge\Twig\Extension\HttpKernelExtension">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.runtime.httpkernel" class="Symfony\Bridge\Twig\Extension\HttpKernelRuntime">
      <tag name="twig.runtime"/>
      <argument type="service" id="fragment.handler"/>
    </service>
    <service id="twig.extension.httpfoundation" class="Symfony\Bridge\Twig\Extension\HttpFoundationExtension">
      <tag name="twig.extension"/>
      <argument type="service" id="url_helper"/>
    </service>
    <service id="twig.extension.debug" class="Twig\Extension\DebugExtension">
      <tag name="twig.extension"/>
    </service>
    <service id="twig.extension.weblink" class="Symfony\Bridge\Twig\Extension\WebLinkExtension">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="twig.configurator.environment" class="Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator">
      <argument>F j, Y H:i</argument>
      <argument>%d days</argument>
      <argument>null</argument>
      <argument>0</argument>
      <argument>.</argument>
      <argument>,</argument>
    </service>
    <service id="twig.runtime_loader" class="Twig\RuntimeLoader\ContainerRuntimeLoader">
      <argument type="service" id=".service_locator.HJisze0"/>
    </service>
    <service id="twig.error_renderer.html" class="Symfony\Bridge\Twig\ErrorRenderer\TwigErrorRenderer">
      <argument type="service" id="twig"/>
      <argument type="service" id="error_handler.error_renderer.html"/>
      <argument type="service">
        <service class="Symfony\Bridge\Twig\ErrorRenderer\TwigErrorRenderer">
          <argument type="service" id="request_stack"/>
          <argument>true</argument>
          <factory class="Symfony\Bridge\Twig\ErrorRenderer\TwigErrorRenderer" method="isDebug"/>
        </service>
      </argument>
    </service>
    <service id="twig.command.debug" class="Symfony\Bridge\Twig\Command\DebugCommand">
      <tag name="console.command" command="debug:twig"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="twig"/>
      <argument>/var/www</argument>
      <argument>%kernel.bundles_metadata%</argument>
      <argument>/var/www/templates</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:twig</argument>
      </call>
    </service>
    <service id="twig.command.lint" class="Symfony\Bundle\TwigBundle\Command\LintCommand">
      <tag name="console.command" command="lint:twig"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="twig"/>
      <call method="setName">
        <argument>lint:twig</argument>
      </call>
    </service>
    <service id="overblog_graphiql.controller.graphql.endpoint" class="Overblog\GraphiQLBundle\Config\GraphQLEndpoint\RouteResolver">
      <argument type="service" id="router.default"/>
      <argument type="collection">
        <argument>Overblog\GraphiQLBundle\Config\GraphQLEndpoint\Helpers\OverblogGraphQLBundleEndpointResolver</argument>
        <argument>getByName</argument>
      </argument>
    </service>
    <service id="overblog_graphiql.view.config" class="Overblog\GraphiQLBundle\Config\GraphiQLViewConfig">
      <argument type="service" id="overblog_graphiql.view.config.javascript_libraries"/>
      <argument>@OverblogGraphiQL/GraphiQL/index.html.twig</argument>
    </service>
    <service id="overblog_graphiql.view.config.javascript_libraries" class="Overblog\GraphiQLBundle\Config\GraphiQLViewJavaScriptLibraries">
      <argument type="string">0.11</argument>
      <argument type="string">15.6</argument>
      <argument type="string">2.0</argument>
    </service>
    <service id="overblog_graphiql.controller" class="Overblog\GraphiQLBundle\Controller\GraphiQLController" public="true">
      <argument type="service" id="twig"/>
      <argument type="service" id="overblog_graphiql.view.config"/>
      <argument type="service" id="overblog_graphiql.controller.graphql.endpoint"/>
    </service>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.App\GraphQL\Resolver\ShortnnerUrlResolver" class="App\GraphQL\Resolver\ShortnnerUrlResolver" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\GraphQL\Resolver\ShortnnerUrlResolver" class="App\GraphQL\Resolver\ShortnnerUrlResolver" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.Overblog\GraphQLBundle\GraphQL\Relay\Mutation\MutationFieldResolver" class="Overblog\GraphQLBundle\GraphQL\Relay\Mutation\MutationFieldResolver" public="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\GraphQL\Relay\Mutation\MutationFieldResolver" class="Overblog\GraphQLBundle\GraphQL\Relay\Mutation\MutationFieldResolver" public="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.Overblog\GraphQLBundle\GraphQL\Relay\Node\GlobalIdFieldResolver" class="Overblog\GraphQLBundle\GraphQL\Relay\Node\GlobalIdFieldResolver" public="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\GraphQL\Relay\Node\GlobalIdFieldResolver" class="Overblog\GraphQLBundle\GraphQL\Relay\Node\GlobalIdFieldResolver" public="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.Overblog\GraphQLBundle\GraphQL\Relay\Node\NodeFieldResolver" class="Overblog\GraphQLBundle\GraphQL\Relay\Node\NodeFieldResolver" public="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\GraphQL\Relay\Node\NodeFieldResolver" class="Overblog\GraphQLBundle\GraphQL\Relay\Node\NodeFieldResolver" public="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface.0.Overblog\GraphQLBundle\GraphQL\Relay\Node\PluralIdentifyingRootFieldResolver" class="Overblog\GraphQLBundle\GraphQL\Relay\Node\PluralIdentifyingRootFieldResolver" public="true" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\GraphQL\Relay\Node\PluralIdentifyingRootFieldResolver" class="Overblog\GraphQLBundle\GraphQL\Relay\Node\PluralIdentifyingRootFieldResolver" public="true" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Call" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Call" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Call" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Call" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Parameter" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Parameter" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Parameter" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Parameter" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Service" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Service" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Service" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Service" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Arguments" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Arguments" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Arguments" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Arguments" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\IsTypeOf" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\IsTypeOf" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\IsTypeOf" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\IsTypeOf" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Mutation" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Mutation" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Mutation" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Mutation" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\FromGlobalID" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\FromGlobalID" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\FromGlobalID" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\FromGlobalID" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\GlobalID" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\GlobalID" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\GlobalID" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\GlobalID" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\IdFetcherCallback" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\IdFetcherCallback" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\IdFetcherCallback" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\IdFetcherCallback" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\MutateAndGetPayloadCallback" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\MutateAndGetPayloadCallback" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\MutateAndGetPayloadCallback" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\MutateAndGetPayloadCallback" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\ResolveSingleInputCallback" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\ResolveSingleInputCallback" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\ResolveSingleInputCallback" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Relay\ResolveSingleInputCallback" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Resolver" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Resolver" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Resolver" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Resolver" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\NewObject" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\NewObject" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\NewObject" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\NewObject" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\GetUser" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\GetUser" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\GetUser" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\GetUser" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyPermission" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyPermission" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyPermission" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyPermission" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyRole" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyRole" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyRole" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasAnyRole" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasPermission" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasPermission" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasPermission" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasPermission" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasRole" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasRole" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasRole" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\HasRole" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAnonymous" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAnonymous" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAnonymous" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAnonymous" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAuthenticated" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAuthenticated" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAuthenticated" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsAuthenticated" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsFullyAuthenticated" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsFullyAuthenticated" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsFullyAuthenticated" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsFullyAuthenticated" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsGranted" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsGranted" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsGranted" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsGranted" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsRememberMe" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsRememberMe" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsRememberMe" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\Security\IsRememberMe" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.expression_function.parameter_alias" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Parameter" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.expression_function.parameter_alias" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Parameter" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.expression_function.service_alias" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Service" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.expression_function.service_alias" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\DependencyInjection\Service" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.expression_function.mutation_alias" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Mutation" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.expression_function.mutation_alias" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Mutation" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction.0.expression_function.resolver_alias" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Resolver" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.expression_function.resolver_alias" class="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionFunction\GraphQL\Resolver" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".service_locator.Kbr2i2X" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="base64" type="service" id="container.env_var_processor"/>
        <argument key="bool" type="service" id="container.env_var_processor"/>
        <argument key="const" type="service" id="container.env_var_processor"/>
        <argument key="csv" type="service" id="container.env_var_processor"/>
        <argument key="default" type="service" id="container.env_var_processor"/>
        <argument key="file" type="service" id="container.env_var_processor"/>
        <argument key="float" type="service" id="container.env_var_processor"/>
        <argument key="int" type="service" id="container.env_var_processor"/>
        <argument key="json" type="service" id="container.env_var_processor"/>
        <argument key="key" type="service" id="container.env_var_processor"/>
        <argument key="query_string" type="service" id="container.env_var_processor"/>
        <argument key="require" type="service" id="container.env_var_processor"/>
        <argument key="resolve" type="service" id="container.env_var_processor"/>
        <argument key="string" type="service" id="container.env_var_processor"/>
        <argument key="trim" type="service" id="container.env_var_processor"/>
        <argument key="url" type="service" id="container.env_var_processor"/>
      </argument>
    </service>
    <service id=".service_locator.KfwZsne" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="response" type="service" id=".errored..service_locator.KfwZsne.Symfony\Component\HttpFoundation\Response"/>
      </argument>
    </service>
    <service id=".service_locator.KfbR3DY" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="loader" type="service" id=".errored..service_locator.KfbR3DY.Symfony\Component\Config\Loader\LoaderInterface"/>
      </argument>
    </service>
    <service id=".service_locator.E1oD6BG" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="kernel::loadRoutes" type="service" id=".service_locator.KfbR3DY"/>
        <argument key="kernel::registerContainerConfiguration" type="service" id=".service_locator.KfbR3DY"/>
        <argument key="kernel::terminate" type="service" id=".service_locator.KfwZsne"/>
        <argument key="kernel:loadRoutes" type="service" id=".service_locator.KfbR3DY"/>
        <argument key="kernel:registerContainerConfiguration" type="service" id=".service_locator.KfbR3DY"/>
        <argument key="kernel:terminate" type="service" id=".service_locator.KfwZsne"/>
      </argument>
    </service>
    <service id=".service_locator.lLv4pWF" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="inline" type="service" id="fragment.renderer.inline"/>
      </argument>
    </service>
    <service id="logger" class="Symfony\Component\HttpKernel\Log\Logger"/>
    <service id=".service_locator.WOytlHA" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="routing.loader" type="service" id="routing.loader"/>
      </argument>
    </service>
    <service id=".service_locator.WOytlHA.router.default" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="router.default"/>
      <argument>router.default</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.WOytlHA" method="withContext"/>
    </service>
    <service id=".service_locator.HLwzKIm" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="router" type="service" id="router.default"/>
      </argument>
    </service>
    <service id=".service_locator.HLwzKIm.router.cache_warmer" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="router.cache_warmer"/>
      <argument>router.cache_warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.HLwzKIm" method="withContext"/>
    </service>
    <service id=".service_locator.aq4MYft" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="twig" type="service" id="twig"/>
      </argument>
    </service>
    <service id=".service_locator.aq4MYft.twig.template_cache_warmer" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="twig.template_cache_warmer"/>
      <argument>twig.template_cache_warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.aq4MYft" method="withContext"/>
    </service>
    <service id=".service_locator.XXv1IfR" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="reverse_container" type="service" id="reverse_container" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id=".service_locator.LrY.obc" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="initialized_session" type="service" id="session" on-invalid="ignore_uninitialized"/>
        <argument key="logger" type="service" id="logger" on-invalid="ignore"/>
        <argument key="request_stack" type="service" id="request_stack"/>
        <argument key="session" type="service" id="session" on-invalid="ignore"/>
        <argument key="session_storage" type="service" id="session.storage.native" on-invalid="ignore"/>
      </argument>
    </service>
    <service id=".service_locator.kODoftA" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="kernel" type="service" id="kernel"/>
      </argument>
    </service>
    <service id=".service_locator.1ZPWTRB" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="env" type="service" id="container.getenv"/>
      </argument>
    </service>
    <service id=".errored..service_locator.KfwZsne.Symfony\Component\HttpFoundation\Response" class="Symfony\Component\HttpFoundation\Response"/>
    <service id=".errored..service_locator.KfbR3DY.Symfony\Component\Config\Loader\LoaderInterface" class="Symfony\Component\Config\Loader\LoaderInterface"/>
    <service id="console.command_loader" class="Symfony\Component\Console\CommandLoader\ContainerCommandLoader" public="true">
      <tag name="container.no_preload"/>
      <argument type="service" id=".service_locator.qImsYJH"/>
      <argument type="collection">
        <argument key="about">console.command.about</argument>
        <argument key="assets:install">console.command.assets_install</argument>
        <argument key="cache:clear">console.command.cache_clear</argument>
        <argument key="cache:pool:clear">console.command.cache_pool_clear</argument>
        <argument key="cache:pool:prune">console.command.cache_pool_prune</argument>
        <argument key="cache:pool:delete">console.command.cache_pool_delete</argument>
        <argument key="cache:pool:list">console.command.cache_pool_list</argument>
        <argument key="cache:warmup">console.command.cache_warmup</argument>
        <argument key="debug:config">console.command.config_debug</argument>
        <argument key="config:dump-reference">console.command.config_dump_reference</argument>
        <argument key="debug:container">console.command.container_debug</argument>
        <argument key="lint:container">console.command.container_lint</argument>
        <argument key="debug:autowiring">console.command.debug_autowiring</argument>
        <argument key="debug:event-dispatcher">console.command.event_dispatcher_debug</argument>
        <argument key="debug:router">console.command.router_debug</argument>
        <argument key="router:match">console.command.router_match</argument>
        <argument key="lint:yaml">console.command.yaml_lint</argument>
        <argument key="secrets:set">console.command.secrets_set</argument>
        <argument key="secrets:remove">console.command.secrets_remove</argument>
        <argument key="secrets:generate-keys">console.command.secrets_generate_key</argument>
        <argument key="secrets:list">console.command.secrets_list</argument>
        <argument key="secrets:decrypt-to-local">console.command.secrets_decrypt_to_local</argument>
        <argument key="secrets:encrypt-from-local">console.command.secrets_encrypt_from_local</argument>
        <argument key="graphql:dump-schema">Overblog\GraphQLBundle\Command\GraphQLDumpSchemaCommand</argument>
        <argument key="graphql:debug">Overblog\GraphQLBundle\Command\DebugCommand</argument>
        <argument key="graphql:compile">Overblog\GraphQLBundle\Command\CompileCommand</argument>
        <argument key="graphql:validate">Overblog\GraphQLBundle\Command\ValidateCommand</argument>
        <argument key="debug:twig">twig.command.debug</argument>
        <argument key="lint:twig">twig.command.lint</argument>
      </argument>
    </service>
    <service id=".service_locator.qImsYJH" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="Overblog\GraphQLBundle\Command\CompileCommand" type="service" id="Overblog\GraphQLBundle\Command\CompileCommand"/>
        <argument key="Overblog\GraphQLBundle\Command\DebugCommand" type="service" id="Overblog\GraphQLBundle\Command\DebugCommand"/>
        <argument key="Overblog\GraphQLBundle\Command\GraphQLDumpSchemaCommand" type="service" id="Overblog\GraphQLBundle\Command\GraphQLDumpSchemaCommand"/>
        <argument key="Overblog\GraphQLBundle\Command\ValidateCommand" type="service" id="Overblog\GraphQLBundle\Command\ValidateCommand"/>
        <argument key="console.command.about" type="service" id="console.command.about"/>
        <argument key="console.command.assets_install" type="service" id="console.command.assets_install"/>
        <argument key="console.command.cache_clear" type="service" id="console.command.cache_clear"/>
        <argument key="console.command.cache_pool_clear" type="service" id="console.command.cache_pool_clear"/>
        <argument key="console.command.cache_pool_delete" type="service" id="console.command.cache_pool_delete"/>
        <argument key="console.command.cache_pool_list" type="service" id="console.command.cache_pool_list"/>
        <argument key="console.command.cache_pool_prune" type="service" id="console.command.cache_pool_prune"/>
        <argument key="console.command.cache_warmup" type="service" id="console.command.cache_warmup"/>
        <argument key="console.command.config_debug" type="service" id="console.command.config_debug"/>
        <argument key="console.command.config_dump_reference" type="service" id="console.command.config_dump_reference"/>
        <argument key="console.command.container_debug" type="service" id="console.command.container_debug"/>
        <argument key="console.command.container_lint" type="service" id="console.command.container_lint"/>
        <argument key="console.command.debug_autowiring" type="service" id="console.command.debug_autowiring"/>
        <argument key="console.command.event_dispatcher_debug" type="service" id="console.command.event_dispatcher_debug"/>
        <argument key="console.command.router_debug" type="service" id="console.command.router_debug"/>
        <argument key="console.command.router_match" type="service" id="console.command.router_match"/>
        <argument key="console.command.secrets_decrypt_to_local" type="service" id="console.command.secrets_decrypt_to_local"/>
        <argument key="console.command.secrets_encrypt_from_local" type="service" id="console.command.secrets_encrypt_from_local"/>
        <argument key="console.command.secrets_generate_key" type="service" id="console.command.secrets_generate_key"/>
        <argument key="console.command.secrets_list" type="service" id="console.command.secrets_list"/>
        <argument key="console.command.secrets_remove" type="service" id="console.command.secrets_remove"/>
        <argument key="console.command.secrets_set" type="service" id="console.command.secrets_set"/>
        <argument key="console.command.yaml_lint" type="service" id="console.command.yaml_lint"/>
        <argument key="twig.command.debug" type="service" id="twig.command.debug"/>
        <argument key="twig.command.lint" type="service" id="twig.command.lint"/>
      </argument>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\QueryType" public="true">
      <tag name="overblog_graphql.type" alias="Query" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\QueryType</argument>
      <factory service="Overblog\GraphQLBundle\Definition\Builder\TypeFactory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\ShortnnerUrlType" public="true">
      <tag name="overblog_graphql.type" alias="ShortnnerUrl" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\ShortnnerUrlType</argument>
      <factory service="Overblog\GraphQLBundle\Definition\Builder\TypeFactory" method="create"/>
    </service>
    <service id="Overblog\GraphQLBundle\__DEFINITIONS__\PageInfoType" public="true">
      <tag name="overblog_graphql.type" alias="PageInfo" generated="1"/>
      <argument>Overblog\GraphQLBundle\__DEFINITIONS__\PageInfoType</argument>
      <factory service="Overblog\GraphQLBundle\Definition\Builder\TypeFactory" method="create"/>
    </service>
    <service id=".service_locator.HJisze0" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="Symfony\Bridge\Twig\Extension\HttpKernelRuntime" type="service" id="twig.runtime.httpkernel"/>
      </argument>
    </service>
    <service id="Psr\Container\ContainerInterface" alias="service_container">
      <deprecated package="symfony/dependency-injection" version="5.1">The "%alias_id%" autowiring alias is deprecated. Define it explicitly in your app if you want to keep using it.</deprecated>
    </service>
    <service id="Symfony\Component\DependencyInjection\ContainerInterface" alias="service_container">
      <deprecated package="symfony/dependency-injection" version="5.1">The "%alias_id%" autowiring alias is deprecated. Define it explicitly in your app if you want to keep using it.</deprecated>
    </service>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ContainerBagInterface" alias="parameter_bag"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface" alias="parameter_bag"/>
    <service id="Symfony\Component\EventDispatcher\EventDispatcherInterface" alias="event_dispatcher"/>
    <service id="Symfony\Contracts\EventDispatcher\EventDispatcherInterface" alias="event_dispatcher"/>
    <service id="Symfony\Component\HttpKernel\HttpKernelInterface" alias="http_kernel"/>
    <service id="Symfony\Component\HttpFoundation\RequestStack" alias="request_stack"/>
    <service id="Symfony\Component\HttpFoundation\UrlHelper" alias="url_helper"/>
    <service id="Symfony\Component\HttpKernel\KernelInterface" alias="kernel"/>
    <service id="Symfony\Component\Filesystem\Filesystem" alias="filesystem"/>
    <service id="Symfony\Component\HttpKernel\Config\FileLocator" alias="file_locator"/>
    <service id="Symfony\Component\HttpKernel\UriSigner" alias="uri_signer"/>
    <service id="Symfony\Component\DependencyInjection\ReverseContainer" alias="reverse_container"/>
    <service id="Symfony\Component\String\Slugger\SluggerInterface" alias="slugger"/>
    <service id="error_renderer.html" alias="twig.error_renderer.html"/>
    <service id="error_renderer" alias="twig.error_renderer.html"/>
    <service id="Psr\EventDispatcher\EventDispatcherInterface" alias="event_dispatcher"/>
    <service id="Psr\Container\ContainerInterface $parameterBag" alias="parameter_bag"/>
    <service id="cache.app_clearer" alias="cache.default_clearer" public="true"/>
    <service id="Psr\Cache\CacheItemPoolInterface" alias="cache.app"/>
    <service id="Symfony\Component\Cache\Adapter\AdapterInterface" alias="cache.app"/>
    <service id="Symfony\Contracts\Cache\CacheInterface" alias="cache.app"/>
    <service id="Symfony\Contracts\Cache\TagAwareCacheInterface" alias="cache.app.taggable"/>
    <service id="cache.default_redis_provider" alias=".cache_connection.GD_MSZC"/>
    <service id="cache.default_memcached_provider" alias=".cache_connection.JKE6keX"/>
    <service id="Symfony\Component\HttpFoundation\Session\SessionInterface" alias="session"/>
    <service id="Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface" alias="session.storage.native"/>
    <service id="SessionHandlerInterface" alias="session.handler.native_file"/>
    <service id="Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface" alias="session.flash_bag"/>
    <service id="session.storage.filesystem" alias="session.storage.mock_file"/>
    <service id="session.storage" alias="session.storage.native"/>
    <service id="session.handler" alias="session.handler.native_file"/>
    <service id="Symfony\Component\HttpKernel\Debug\FileLinkFormatter" alias="debug.file_link_formatter"/>
    <service id="router" alias="router.default" public="true"/>
    <service id="Symfony\Component\Routing\RouterInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\Generator\UrlGeneratorInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\Matcher\UrlMatcherInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\RequestContextAwareInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\RequestContext" alias="router.request_context"/>
    <service id="Symfony\Component\PropertyAccess\PropertyAccessorInterface" alias="property_accessor"/>
    <service id="Symfony\Component\PropertyInfo\PropertyAccessExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyDescriptionExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyInfoExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyTypeExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyListExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyInitializableExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyReadInfoExtractorInterface" alias="property_info.reflection_extractor"/>
    <service id="Symfony\Component\PropertyInfo\PropertyWriteInfoExtractorInterface" alias="property_info.reflection_extractor"/>
    <service id="GraphQL\Executor\Promise\PromiseAdapter" alias="GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter"/>
    <service id="overblog_graphql.type_resolver" alias="Overblog\GraphQLBundle\Resolver\TypeResolver" public="true"/>
    <service id="overblog_graphql.resolver_resolver" alias="Overblog\GraphQLBundle\Resolver\ResolverResolver" public="true"/>
    <service id="overblog_graphql.mutation_resolver" alias="Overblog\GraphQLBundle\Resolver\MutationResolver" public="true"/>
    <service id="overblog_graphql.access_resolver" alias="Overblog\GraphQLBundle\Resolver\AccessResolver" public="true"/>
    <service id="overblog_graphql.cache_compiler" alias="Overblog\GraphQLBundle\Generator\TypeGenerator" public="true"/>
    <service id="overblog_graphql.react.promise_adapter" alias="Overblog\GraphQLBundle\Executor\Promise\Adapter\ReactPromiseAdapter" public="true"/>
    <service id="overblog_graphql.request_executor" alias="Overblog\GraphQLBundle\Request\Executor" public="true"/>
    <service id="overblog_graphql.request_parser" alias="Overblog\GraphQLBundle\Request\Parser" public="true"/>
    <service id="overblog_graphql.request_batch_parser" alias="Overblog\GraphQLBundle\Request\BatchParser" public="true"/>
    <service id="overblog_graphql.arguments_transformer" alias="Overblog\GraphQLBundle\Transformer\ArgumentsTransformer" public="true"/>
    <service id="overblog_graphql.schema_builder" alias="Overblog\GraphQLBundle\Definition\Builder\SchemaBuilder"/>
    <service id="overblog_graphql.type_factory" alias="Overblog\GraphQLBundle\Definition\Builder\TypeFactory"/>
    <service id="overblog_graphql.executor" alias="Overblog\GraphQLBundle\Executor\Executor"/>
    <service id="overblog_graphql.promise_adapter" alias="GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter"/>
    <service id="overblog_graphql.expression_language" alias="Overblog\GraphQLBundle\ExpressionLanguage\ExpressionLanguage"/>
    <service id="Overblog\GraphQLBundle\Error\ExceptionConverterInterface" alias="Overblog\GraphQLBundle\Error\ExceptionConverter"/>
    <service id="overblog_graphql.default_field_resolver" alias="Overblog\GraphQLBundle\Resolver\FieldResolver"/>
    <service id="Twig_Environment" alias="twig"/>
    <service id="Twig\Environment" alias="twig"/>
    <service id="Overblog\GraphiQLBundle\Controller\GraphiQLController" alias="overblog_graphiql.controller" public="true"/>
    <service id="container.env_var_processors_locator" alias=".service_locator.Kbr2i2X" public="true"/>
    <service id="twig.loader.filesystem" alias="twig.loader.native_filesystem"/>
    <service id="argument_resolver.controller_locator" alias=".service_locator.E1oD6BG"/>
    <service id="twig.loader" alias="twig.loader.native_filesystem"/>
    <service id="Psr\Log\LoggerInterface" alias="logger"/>
    <service id="twig.error_renderer.html.inner" alias="error_handler.error_renderer.html"/>
  </services>
</container>
